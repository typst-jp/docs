route: /docs/reference/foundations/float/
title: Float
description: Documentation for the Float type.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-value
    name: value
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-is-nan
    name: Is Nan
    children: []
  - id: definitions-is-infinite
    name: Is Infinite
    children: []
  - id: definitions-signum
    name: Signum
    children: []
body:
  kind: type
  content:
    name: float
    title: Float
    keywords: []
    oneliner: A floating-point number.
    details: |-
      <p>A floating-point number.</p>
      <p>A limited-precision representation of a real number. Typst uses 64 bits to
      store floats. Wherever a float is expected, you can also pass an
      <a href="/docs/reference/foundations/int/">integer</a>.</p>
      <p>You can convert a value to a float with this type's constructor.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-num">#</span><span class="typ-num">3.14</span> <span class="typ-escape">\</span>
      <span class="typ-num">#</span><span class="typ-num">1e4</span> <span class="typ-escape">\</span>
      <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">10</span> <span class="typ-op">/</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/aae24c99c8eb5e58f3bddcadd05feaf7.png" alt="Preview" width="480" height="190"/></div></div>
    constructor:
      path: []
      name: float
      title: Construct
      keywords: []
      oneliner: Converts a value to a float.
      element: false
      contextual: false
      details: |-
        <p>Converts a value to a float.</p>
        <ul>
        <li>Booleans are converted to <code>0.0</code> or <code>1.0</code>.</li>
        <li>Integers are converted to the closest 64-bit float.</li>
        <li>Ratios are divided by 100%.</li>
        <li>Strings are parsed in base 10 to the closest 64-bit float.
        Exponential notation is supported.</li>
        </ul>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-key">false</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-key">true</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-num">40%</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-str">&quot;2.7&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-str">&quot;1e5&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/b776a834cdc84f6227a04b6bcb44a699.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The value that should be converted to a float.</p>
        example: null
        types:
        - bool
        - int
        - float
        - ratio
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    scope:
    - path:
      - float
      name: is-nan
      title: Is Nan
      keywords: []
      oneliner: Checks if a float is not a number.
      element: false
      contextual: false
      details: |-
        <p>Checks if a float is not a number.</p>
        <p>In IEEE 754, more than one bit pattern represents a NaN. This function
        returns <code>true</code> if the float is any of those bit patterns.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">float</span><span class="typ-punct">.</span><span class="typ-func">is-nan</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">float</span><span class="typ-punct">.</span><span class="typ-func">is-nan</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">float</span><span class="typ-punct">.</span><span class="typ-func">is-nan</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>nan<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/218016bc68d46c30db32f1cb515d79d2.png" alt="Preview" width="480" height="190"/></div></div>
      self: true
      params: []
      returns:
      - bool
      scope: []
    - path:
      - float
      name: is-infinite
      title: Is Infinite
      keywords: []
      oneliner: Checks if a float is infinite.
      element: false
      contextual: false
      details: |-
        <p>Checks if a float is infinite.</p>
        <p>For floats, there is positive and negative infinity. This function
        returns <code>true</code> if the float is either positive or negative infinity.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">float</span><span class="typ-punct">.</span><span class="typ-func">is-infinite</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">float</span><span class="typ-punct">.</span><span class="typ-func">is-infinite</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">float</span><span class="typ-punct">.</span><span class="typ-func">is-infinite</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>inf<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/315c8d7f1644b6447b4e03fcfa3f2b43.png" alt="Preview" width="480" height="190"/></div></div>
      self: true
      params: []
      returns:
      - bool
      scope: []
    - path:
      - float
      name: signum
      title: Signum
      keywords: []
      oneliner: Calculates the sign of a floating point number.
      element: false
      contextual: false
      details: |-
        <p>Calculates the sign of a floating point number.</p>
        <ul>
        <li>If the number is positive (including <code><span class="typ-op">+</span><span class="typ-num">0.0</span></code>), returns <code><span class="typ-num">1.0</span></code>.</li>
        <li>If the number is negative (including <code><span class="typ-op">-</span><span class="typ-num">0.0</span></code>), returns <code><span class="typ-op">-</span><span class="typ-num">1.0</span></code>.</li>
        <li>If the number is <a href="/docs/reference/foundations/nan/"><code>calc<span class="typ-punct">.</span>nan</code></a>, returns
        <a href="/docs/reference/foundations/nan/"><code>calc<span class="typ-punct">.</span>nan</code></a>.</li>
        </ul>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">5.0</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">signum</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">5.0</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">signum</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">0.0</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">signum</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        </code></pre><div class="preview"><img src="/assets/docs/6bcf580e4539680fc32fb5fe50718939.png" alt="Preview" width="480" height="190"/></div></div>
      self: true
      params: []
      returns:
      - float
      scope: []
children: []
