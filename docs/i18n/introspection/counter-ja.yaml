route: /docs/reference/introspection/counter/
title: Counter
description: Documentation for the Counter type.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: accessing
  name: Accessing
  children: []
- id: displaying
  name: Displaying
  children: []
- id: modifying
  name: Modifying
  children: []
- id: page-counter
  name: Page Counter
  children: []
- id: custom-counters
  name: Custom Counters
  children: []
- id: how-to-step
  name: How To Step
  children: []
- id: time-travel
  name: Time Travel
  children: []
- id: other-state
  name: Other State
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-key
    name: key
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-get
    name: Get
    children: []
  - id: definitions-display
    name: Display
    children:
    - id: definitions-display-numbering
      name: numbering
      children: []
    - id: definitions-display-both
      name: both
      children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-selector
      name: selector
      children: []
  - id: definitions-final
    name: Final
    children:
    - id: definitions-final-location
      name: location
      children: []
  - id: definitions-step
    name: Step
    children:
    - id: definitions-step-level
      name: level
      children: []
  - id: definitions-update
    name: Update
    children:
    - id: definitions-update-update
      name: update
      children: []
body:
  kind: type
  content:
    name: counter
    title: Counter
    keywords: []
    oneliner: Counts through pages, elements, and more.
    details: |-
      <p>Counts through pages, elements, and more.</p>
      <p>With the counter function, you can access and modify counters for pages,
      headings, figures, and more. Moreover, you can define custom counters for
      other things you want to count.</p>
      <p>Since counters change throughout the course of the document, their current
      value is <em>contextual.</em> It is recommended to read the chapter on <a href="/docs/reference/context/" title="context">context</a>
      before continuing here.</p>
      <h2 id="accessing">Accessing a counter</h2>
      <p>To access the raw value of a counter, we can use the <a href="/docs/reference/introspection/counter/#definitions-get"><code>get</code></a>
      function. This function returns an <a href="/docs/reference/foundations/array/" title="array">array</a>: Counters can have multiple
      levels (in the case of headings for sections, subsections, and so on), and
      each item in the array corresponds to one level.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      Raw value of heading counter is
      <span class="typ-key">#</span><span class="typ-key">context</span> <span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">get</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/f0000cf7b18d1b2ca2529086d06d3eff.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="displaying">Displaying a counter</h2>
      <p>Often, we want to display the value of a counter in a more human-readable
      way. To do that, we can call the <a href="/docs/reference/introspection/counter/#definitions-display"><code>display</code></a> function on
      the counter. This function retrieves the current counter value and formats
      it either with a provided or with an automatically inferred <a href="/docs/reference/model/numbering/" title="numbering">numbering</a>.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      Some text here.

      <span class="typ-heading">= Background</span>
      The current value is: <span class="typ-key">#</span><span class="typ-key">context</span> <span class="typ-punct">{</span>
        <span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-punct">}</span>

      Or in roman numerals: <span class="typ-key">#</span><span class="typ-key">context</span> <span class="typ-punct">{</span>
        <span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-str">&quot;I&quot;</span><span class="typ-punct">)</span>
      <span class="typ-punct">}</span>
      </code></pre><div class="preview"><img src="/assets/docs/ab2436dd536a100339549def96a8068a.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="modifying">Modifying a counter</h2>
      <p>To modify a counter, you can use the <code>step</code> and <code>update</code> methods:</p>
      <ul>
      <li>
      <p>The <code>step</code> method increases the value of the counter by one. Because
      counters can have multiple levels , it optionally takes a <code>level</code>
      argument. If given, the counter steps at the given depth.</p>
      </li>
      <li>
      <p>The <code>update</code> method allows you to arbitrarily modify the counter. In its
      basic form, you give it an integer (or an array for multiple levels). For
      more flexibility, you can instead also give it a function that receives
      the current value and returns a new value.</p>
      </li>
      </ul>
      <p>The heading counter is stepped before the heading is displayed, so
      <code>Analysis</code> gets the number seven even though the counter is at six after the
      second update.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Background</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">*</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Analysis</span>
      Let&#39;s skip 7.1.
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

      <span class="typ-heading">== Analysis</span>
      Still at <span class="typ-key">#</span><span class="typ-key">context</span> <span class="typ-punct">{</span>
        <span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-punct">}</span>
      </code></pre><div class="preview"><img src="/assets/docs/88fb4b6bcd763483f95d2ed86200bc95.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="page-counter">Page counter</h2>
      <p>The page counter is special. It is automatically stepped at each pagebreak.
      But like other counters, you can also step it manually. For example, you
      could have Roman page numbers for your preface, then switch to Arabic page
      numbers for your main content and reset the page counter to one.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;(i)&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Preface</span>
      The preface is numbered with
      roman numerals.

      <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1 / 1&quot;</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Main text</span>
      Here, the counter is reset to one.
      We also display both the current
      page and total number of pages in
      Arabic numbers.
      </code></pre><div class="preview"><img src="/assets/docs/6e042ee9b3964a4ce84bb21b9ca876e8.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="custom-counters">Custom counters</h2>
      <p>To define your own counter, call the <code>counter</code> function with a string as a
      key. This key identifies the counter globally.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">context</span> mine<span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">context</span> mine<span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>c <span class="typ-op">=&gt;</span> c <span class="typ-op">*</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">context</span> mine<span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/04d7c42c410aa3e442052c6ecdce5d3a.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="how-to-step">How to step</h2>
      <p>When you define and use a custom counter, in general, you should first step
      the counter and then display it. This way, the stepping behaviour of a
      counter can depend on the element it is stepped for. If you were writing a
      counter for, let's say, theorems, your theorem's definition would thus first
      include the counter step and only then display the counter and the theorem's
      contents.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> c <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;theorem&quot;</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">theorem</span><span class="typ-punct">(</span>it<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">block</span><span class="typ-punct">[</span>
        <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-strong">*Theorem <span class="typ-key">#</span><span class="typ-key">context</span> c<span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>:*</span>
        <span class="typ-pol">#</span><span class="typ-pol">it</span>
      <span class="typ-punct">]</span>

      <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>1 = 1<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
      <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>2 &lt; 3<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
      </code></pre><div class="preview"><img src="/assets/docs/c8a2c4e5de1a6dbf1e6b53005ea99f1d.png" alt="Preview" width="480" height="190"/></div></div>
      <p>The rationale behind this is best explained on the example of the heading
      counter: An update to the heading counter depends on the heading's level. By
      stepping directly before the heading, we can correctly step from <code>1</code> to
      <code>1.1</code> when encountering a level 2 heading. If we were to step after the
      heading, we wouldn't know what to step to.</p>
      <p>Because counters should always be stepped before the elements they count,
      they always start at zero. This way, they are at one for the first display
      (which happens after the first step).</p>
      <h2 id="time-travel">Time travel</h2>
      <p>Counters can travel through time! You can find out the final value of the
      counter before it is reached and even determine what the value was at any
      particular location in the document.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Values</span>
      <span class="typ-key">#</span><span class="typ-key">context</span> <span class="typ-punct">[</span>
        Value here: <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">get</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        At intro: <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-label">&lt;intro&gt;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        Final value: <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">final</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-punct">]</span>

      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">+</span> <span class="typ-num">3</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span> <span class="typ-label">&lt;intro&gt;</span>
      <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span>

      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/45afacb654d448206f10f3a6401ebe71.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="other-state">Other kinds of state</h2>
      <p>The <code>counter</code> type is closely related to <a href="/docs/reference/introspection/state/" title="state">state</a> type. Read its
      documentation for more details on state management in Typst and why it
      doesn't just use normal variables for counters.</p>
    constructor:
      path: []
      name: counter
      title: Construct
      keywords: []
      oneliner: Create a new counter identified by a key.
      element: false
      contextual: false
      details: <p>Create a new counter identified by a key.</p>
      example: null
      self: false
      params:
      - name: key
        details: |-
          <p>The key that identifies this counter.</p>
          <ul>
          <li>If it is a string, creates a custom counter that is only affected
          by manual updates,</li>
          <li>If it is the <a href="/docs/reference/layout/page/" title="`page`"><code>page</code></a> function, counts through pages,</li>
          <li>If it is a <a href="/docs/reference/foundations/selector/" title="selector">selector</a>, counts through elements that matches with the
          selector. For example,
          <ul>
          <li>provide an element function: counts elements of that type,</li>
          <li>provide a <a href="/docs/reference/foundations/label/"><code><span class="typ-label">&lt;label&gt;</span></code></a>: counts elements with that label.</li>
          </ul>
          </li>
          </ul>
        example: null
        types:
        - str
        - label
        - selector
        - location
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - counter
      scope: []
    scope:
    - path:
      - counter
      name: get
      title: Get
      keywords: []
      oneliner: Retrieves the value of the counter at the current location. Always
      element: false
      contextual: true
      details: |-
        <p>Retrieves the value of the counter at the current location. Always
        returns an array of integers, even if the counter has just one number.</p>
        <p>This is equivalent to <code>counter<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-func">here</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code>.</p>
      example: null
      self: true
      params: []
      returns:
      - int
      - array
      scope: []
    - path:
      - counter
      name: display
      title: Display
      keywords: []
      oneliner: Displays the current value of the counter with a numbering and returns
      element: false
      contextual: true
      details: |-
        <p>Displays the current value of the counter with a numbering and returns
        the formatted output.</p>
        <p><em>Compatibility:</em> For compatibility with Typst 0.10 and lower, this
        function also works without an established context. Then, it will create
        opaque contextual content rather than directly returning the output of
        the numbering. This behaviour will be removed in a future release.</p>
      example: null
      self: true
      params:
      - name: numbering
        details: |-
          <p>A <a href="/docs/reference/model/numbering/">numbering pattern or a function</a>, which specifies how
          to display the counter. If given a function, that function receives
          each number of the counter as a separate argument. If the amount of
          numbers varies, e.g. for the heading argument, you can use an
          <a href="/docs/reference/foundations/arguments/">argument sink</a>.</p>
          <p>If this is omitted or set to <code><span class="typ-key">auto</span></code>, displays the counter with the
          numbering style for the counted element or with the pattern
          <code><span class="typ-str">&quot;1.1&quot;</span></code> if no such style exists.</p>
        example: null
        types:
        - auto
        - str
        - function
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      - name: both
        details: |-
          <p>If enabled, displays the current and final top-level count together.
          Both can be styled through a single numbering pattern. This is used
          by the page numbering property to display the current and total
          number of pages when a pattern like <code><span class="typ-str">&quot;1 / 1&quot;</span></code> is given.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - counter
      name: at
      title: At
      keywords: []
      oneliner: Retrieves the value of the counter at the given location. Always returns
      element: false
      contextual: true
      details: |-
        <p>Retrieves the value of the counter at the given location. Always returns
        an array of integers, even if the counter has just one number.</p>
        <p>The <code>selector</code> must match exactly one element in the document. The most
        useful kinds of selectors for this are <a href="/docs/reference/foundations/label/">labels</a> and
        <a href="/docs/reference/introspection/location/">locations</a>.</p>
        <p><em>Compatibility:</em> For compatibility with Typst 0.10 and lower, this
        function also works without a known context if the <code>selector</code> is a
        location. This behaviour will be removed in a future release.</p>
      example: null
      self: true
      params:
      - name: selector
        details: <p>The place at which the counter's value should be retrieved.</p>
        example: null
        types:
        - label
        - selector
        - location
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - array
      scope: []
    - path:
      - counter
      name: final
      title: Final
      keywords: []
      oneliner: Retrieves the value of the counter at the end of the document. Always
      element: false
      contextual: true
      details: |-
        <p>Retrieves the value of the counter at the end of the document. Always
        returns an array of integers, even if the counter has just one number.</p>
      example: null
      self: true
      params:
      - name: location
        details: |-
          <p><em>Compatibility:</em> This argument only exists for compatibility with
          Typst 0.10 and lower and shouldn't be used anymore.</p>
        example: null
        types:
        - none
        - location
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      returns:
      - int
      - array
      scope: []
    - path:
      - counter
      name: step
      title: Step
      keywords: []
      oneliner: Increases the value of the counter by one.
      element: false
      contextual: false
      details: |-
        <p>Increases the value of the counter by one.</p>
        <p>The update will be in effect at the position where the returned content
        is inserted into the document. If you don't put the output into the
        document, nothing happens! This would be the case, for example, if you
        write <code><span class="typ-key">let</span> _ <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code>. Counter updates are always
        applied in layout order and in that case, Typst wouldn't know when to
        step the counter.</p>
      example: null
      self: true
      params:
      - name: level
        details: <p>The depth at which to step the counter. Defaults to <code><span
          class="typ-num">1</span></code>.</p>
        example: null
        types:
        - int
        strings: []
        default: <code><span class="typ-num">1</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - counter
      name: update
      title: Update
      keywords: []
      oneliner: Updates the value of the counter.
      element: false
      contextual: false
      details: |-
        <p>Updates the value of the counter.</p>
        <p>Just like with <code>step</code>, the update only occurs if you put the resulting
        content into the document.</p>
      example: null
      self: true
      params:
      - name: update
        details: |-
          <p>If given an integer or array of integers, sets the counter to that
          value. If given a function, that function receives the previous
          counter value (with each number as a separate argument) and has to
          return the new value (integer or array).</p>
        example: null
        types:
        - int
        - array
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
children: []
