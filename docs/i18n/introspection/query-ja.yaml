route: /docs/reference/introspection/query/
title: Query
description: Documentation for the `query` function.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: finding-elements
  name: Finding Elements
  children: []
- id: caution
  name: Caution
  children: []
- id: command-line-queries
  name: Command Line Queries
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-target
    name: target
    children: []
  - id: parameters-location
    name: location
    children: []
body:
  kind: func
  content:
    path: []
    name: query
    title: Query
    keywords: []
    oneliner: Finds elements in the document.
    element: false
    contextual: true
    details: |-
      <p>Finds elements in the document.</p>
      <p>The <code>query</code> functions lets you search your document for elements of a
      particular type or with a particular label. To use it, you first need to
      ensure that <a href="/docs/reference/context/" title="context">context</a> is available.</p>
      <h2 id="finding-elements">Finding elements</h2>
      <p>In the example below, we create a custom page header that displays the text
      &quot;Typst Academy&quot; in small capitals and the current section title. On the
      first page, the section title is omitted because the header is before the
      first section heading.</p>
      <p>To realize this layout, we open a <code>context</code> and then query for all headings
      after the <a href="/docs/reference/introspection/here/">current location</a>. The code within the context block
      runs twice: Once per page.</p>
      <ul>
      <li>
      <p>On the first page the query for all headings before the current location
      yields an empty array: There are no previous headings. We check for this
      case and just display &quot;Typst Academy&quot;.</p>
      </li>
      <li>
      <p>For the second page, we retrieve the last element from the query's result.
      This is the latest heading before the current position and as such, it is
      the heading of the section we are currently in. We access its content
      through the <code>body</code> field and display it alongside &quot;Typst Academy&quot;.</p>
      </li>
      </ul>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>header<span class="typ-punct">:</span> <span class="typ-key">context</span> <span class="typ-punct">{</span>
        <span class="typ-key">let</span> elems <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span>
          <span class="typ-func">selector</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">before</span><span class="typ-punct">(</span><span class="typ-func">here</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        <span class="typ-key">let</span> academy <span class="typ-op">=</span> <span class="typ-func">smallcaps</span><span class="typ-punct">[</span>
          Typst Academy
        <span class="typ-punct">]</span>
        <span class="typ-key">if</span> elems<span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">0</span> <span class="typ-punct">{</span>
          <span class="typ-func">align</span><span class="typ-punct">(</span>right<span class="typ-punct">,</span> academy<span class="typ-punct">)</span>
        <span class="typ-punct">}</span> <span class="typ-key">else</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> body <span class="typ-op">=</span> elems<span class="typ-punct">.</span><span class="typ-func">last</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span>body
          academy <span class="typ-op">+</span> <span class="typ-func">h</span><span class="typ-punct">(</span><span class="typ-num">1fr</span><span class="typ-punct">)</span> <span class="typ-op">+</span> <span class="typ-func">emph</span><span class="typ-punct">(</span>body<span class="typ-punct">)</span>
        <span class="typ-punct">}</span>
      <span class="typ-punct">}</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">23</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Background</span>
      <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">30</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Analysis</span>
      <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">15</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/1c9276617894de0b283073a4f1321d5b.png" alt="Preview" width="480" height="190"/></div></div>
      <p>You can get the location of the elements returned by <code>query</code> with
      <a href="/docs/reference/foundations/content/#definitions-location"><code>location</code></a>.</p>
      <h2 id="caution">A word of caution</h2>
      <p>To resolve all your queries, Typst evaluates and layouts parts of the
      document multiple times. However, there is no guarantee that your queries
      can actually be completely resolved. If you aren't careful a query can
      affect itselfâ€”leading to a result that never stabilizes.</p>
      <p>In the example below, we query for all headings in the document. We then
      generate as many headings. In the beginning, there's just one heading,
      titled <code>Real</code>. Thus, <code>count</code> is <code>1</code> and one <code>Fake</code> heading is generated.
      Typst sees that the query's result has changed and processes it again. This
      time, <code>count</code> is <code>2</code> and two <code>Fake</code> headings are generated. This goes on and
      on. As we can see, the output has a finite amount of headings. This is
      because Typst simply gives up after a few attempts.</p>
      <p>In general, you should try not to write queries that affect themselves. The
      same words of caution also apply to other introspection features like
      <a href="/docs/reference/introspection/counter/">counters</a> and <a href="/docs/reference/introspection/state/" title="state">state</a>.</p>
      <div class="previewed-code"><pre><code><span class="typ-heading">= Real</span>
      <span class="typ-key">#</span><span class="typ-key">context</span> <span class="typ-punct">{</span>
        <span class="typ-key">let</span> elems <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span>
        <span class="typ-key">let</span> count <span class="typ-op">=</span> elems<span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        count <span class="typ-op">*</span> <span class="typ-punct">[</span><span class="typ-heading">= Fake</span><span class="typ-punct">]</span>
      <span class="typ-punct">}</span>
      </code></pre><div class="preview"><img src="/assets/docs/d1396328e8e0b2f1e7babd5712bcda07.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="command-line-queries">Command line queries</h2>
      <p>You can also perform queries from the command line with the <code>typst query</code>
      command. This command executes an arbitrary query on the document and
      returns the resulting elements in serialized form. Consider the following
      <code>example.typ</code> file which contains some invisible <a href="/docs/reference/introspection/metadata/" title="metadata">metadata</a>:</p>
      <pre><code><span class="typ-func">#</span><span class="typ-func">metadata</span><span class="typ-punct">(</span><span class="typ-str">&quot;This is a note&quot;</span><span class="typ-punct">)</span> <span class="typ-label">&lt;note&gt;</span>
      </code></pre>
      <p>You can execute a query on it as follows using Typst's CLI:</p>
      <pre style="background-color:#ffffff;">
      <span style="color:#4b69c6;">$</span><span style="color:#000000;"> typst query example.typ </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;
      </span><span style="color:#4b69c6;">[
      </span><span style="color:#000000;">  {
      </span><span style="color:#000000;">    </span><span style="color:#298e0d;">&quot;func&quot;</span><span style="color:#4b69c6;">: </span><span style="color:#298e0d;">&quot;metadata&quot;</span><span style="color:#000000;">,
      </span><span style="color:#000000;">    </span><span style="color:#298e0d;">&quot;value&quot;</span><span style="color:#4b69c6;">: </span><span style="color:#298e0d;">&quot;This is a note&quot;</span><span style="color:#000000;">,
      </span><span style="color:#000000;">    </span><span style="color:#298e0d;">&quot;label&quot;</span><span style="color:#4b69c6;">: </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;
      </span><span style="color:#000000;">  }
      </span><span style="color:#4b69c6;">]
      </span></pre>
      <p>Frequently, you're interested in only one specific field of the resulting
      elements. In the case of the <code>metadata</code> element, the <code>value</code> field is the
      interesting one. You can extract just this field with the <code>--field</code>
      argument.</p>
      <pre style="background-color:#ffffff;">
      <span style="color:#4b69c6;">$</span><span style="color:#000000;"> typst query example.typ </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;</span><span style="color:#000000;"> --field value
      </span><span style="color:#4b69c6;">[</span><span style="color:#298e0d;">&quot;This is a note&quot;</span><span style="color:#4b69c6;">]
      </span></pre>
      <p>If you are interested in just a single element, you can use the <code>--one</code>
      flag to extract just it.</p>
      <pre style="background-color:#ffffff;">
      <span style="color:#4b69c6;">$</span><span style="color:#000000;"> typst query example.typ </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;</span><span style="color:#000000;"> --field value --one
      </span><span style="color:#298e0d;">&quot;This is a note&quot;
      </span></pre>
    example: null
    self: false
    params:
    - name: target
      details: |-
        <p>Can be</p>
        <ul>
        <li>an element function like a <code>heading</code> or <code>figure</code>,</li>
        <li>a <code><span class="typ-label">&lt;label&gt;</span></code>,</li>
        <li>a more complex selector like <code>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span></code>,</li>
        <li>or <code><span class="typ-func">selector</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">before</span><span class="typ-punct">(</span><span class="typ-func">here</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code>.</li>
        </ul>
        <p>Only <a href="/docs/reference/introspection/location/#locatable">locatable</a> element functions are supported.</p>
      example: null
      types:
      - label
      - selector
      - location
      - function
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    - name: location
      details: |-
        <p><em>Compatibility:</em> This argument only exists for compatibility with
        Typst 0.10 and lower and shouldn't be used anymore.</p>
      example: null
      types:
      - none
      - location
      strings: []
      default: <code><span class="typ-key">none</span></code>
      positional: true
      named: false
      required: false
      variadic: false
      settable: false
    returns:
    - array
    scope: []
children: []
